import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * `mongodbatlas.AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * ```
 * ### Create an alert with two notifications using Email and SMS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [
 *         {
 *             delayMin: 0,
 *             emailEnabled: true,
 *             intervalMin: 5,
 *             roles: [
 *                 "GROUP_DATA_ACCESS_READ_ONLY",
 *                 "GROUP_CLUSTER_MANAGER",
 *                 "GROUP_DATA_ACCESS_ADMIN",
 *             ],
 *             smsEnabled: false,
 *             typeName: "GROUP",
 *         },
 *         {
 *             delayMin: 0,
 *             emailEnabled: false,
 *             intervalMin: 5,
 *             smsEnabled: true,
 *             typeName: "ORG",
 *         },
 *     ],
 *     projectId: "PROJECT ID",
 * });
 * ```
 *
 * ## Import
 *
 * Alert Configuration can be imported using the `project_id-alert_configuration_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/alertConfiguration:AlertConfiguration test 5d0f1f74cf09a29120e123cd-5d0f1f74cf09a29120e1fscg
 * ```
 *
 *  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/alert-configurations/)
 */
export declare class AlertConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AlertConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertConfigurationState, opts?: pulumi.CustomResourceOptions): AlertConfiguration;
    /**
     * Returns true if the given object is an instance of AlertConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AlertConfiguration;
    /**
     * Unique identifier for the alert configuration.
     */
    readonly alertConfigurationId: pulumi.Output<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    readonly created: pulumi.Output<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    readonly enabled: pulumi.Output<boolean>;
    /**
     * The type of event that will trigger an alert.
     */
    readonly eventType: pulumi.Output<string>;
    readonly matchers: pulumi.Output<outputs.AlertConfigurationMatcher[] | undefined>;
    /**
     * @deprecated use metric_threshold_config instead
     */
    readonly metricThreshold: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly metricThresholdConfig: pulumi.Output<outputs.AlertConfigurationMetricThresholdConfig | undefined>;
    readonly notifications: pulumi.Output<outputs.AlertConfigurationNotification[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Threshold value outside of which an alert will be triggered.
     *
     * @deprecated use threshold_config instead
     */
    readonly threshold: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly thresholdConfig: pulumi.Output<outputs.AlertConfigurationThresholdConfig | undefined>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    readonly updated: pulumi.Output<string>;
    /**
     * Create a AlertConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertConfigurationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AlertConfiguration resources.
 */
export interface AlertConfigurationState {
    /**
     * Unique identifier for the alert configuration.
     */
    alertConfigurationId?: pulumi.Input<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    created?: pulumi.Input<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     */
    eventType?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    /**
     * @deprecated use metric_threshold_config instead
     */
    metricThreshold?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    metricThresholdConfig?: pulumi.Input<inputs.AlertConfigurationMetricThresholdConfig>;
    notifications?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Threshold value outside of which an alert will be triggered.
     *
     * @deprecated use threshold_config instead
     */
    threshold?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    thresholdConfig?: pulumi.Input<inputs.AlertConfigurationThresholdConfig>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    updated?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AlertConfiguration resource.
 */
export interface AlertConfigurationArgs {
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     */
    eventType: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    /**
     * @deprecated use metric_threshold_config instead
     */
    metricThreshold?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    metricThresholdConfig?: pulumi.Input<inputs.AlertConfigurationMetricThresholdConfig>;
    notifications: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId: pulumi.Input<string>;
    /**
     * Threshold value outside of which an alert will be triggered.
     *
     * @deprecated use threshold_config instead
     */
    threshold?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    thresholdConfig?: pulumi.Input<inputs.AlertConfigurationThresholdConfig>;
}
