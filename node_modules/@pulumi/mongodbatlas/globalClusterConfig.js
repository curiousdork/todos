"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalClusterConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.GlobalClusterConfig` provides a Global Cluster Configuration resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Examples Usage
 *
 * ### Example Global cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     diskSizeGb: 80,
 *     cloudBackup: true,
 *     clusterType: "GEOSHARDED",
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M30",
 *     replicationSpecs: [
 *         {
 *             zoneName: "Zone 1",
 *             numShards: 1,
 *             regionsConfigs: [{
 *                 regionName: "EU_CENTRAL_1",
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *             }],
 *         },
 *         {
 *             zoneName: "Zone 2",
 *             numShards: 1,
 *             regionsConfigs: [{
 *                 regionName: "US_EAST_2",
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *             }],
 *         },
 *     ],
 * });
 * const config = new mongodbatlas.GlobalClusterConfig("config", {
 *     projectId: test.projectId,
 *     clusterName: test.name,
 *     managedNamespaces: [{
 *         db: "mydata",
 *         collection: "publishers",
 *         customShardKey: "city",
 *         isCustomShardKeyHashed: false,
 *         isShardKeyUnique: false,
 *     }],
 *     customZoneMappings: [{
 *         location: "CA",
 *         zone: "Zone 1",
 *     }],
 * });
 * ```
 *
 * ### Example Global cluster config
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster_test = new mongodbatlas.Cluster("cluster-test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     backupEnabled: true,
 *     autoScalingDiskGbEnabled: true,
 *     mongoDbMajorVersion: "4.0",
 *     providerName: "AWS",
 *     diskSizeGb: 100,
 *     providerInstanceSizeName: "M40",
 * });
 * const config = new mongodbatlas.GlobalClusterConfig("config", {
 *     projectId: mongodbatlas_cluster.test.project_id,
 *     clusterName: mongodbatlas_cluster.test.name,
 *     managedNamespaces: [{
 *         db: "mydata",
 *         collection: "publishers",
 *         customShardKey: "city",
 *     }],
 *     customZoneMappings: [{
 *         location: "CA",
 *         zone: "Zone 1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Database users can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTER_NAME`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/globalClusterConfig:GlobalClusterConfig config 1112222b3bf99403840e8934-my-cluster
 * ```
 *
 *  See detailed information for arguments and attributes[MongoDB API Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/)
 */
class GlobalClusterConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["customZoneMapping"] = state ? state.customZoneMapping : undefined;
            resourceInputs["customZoneMappings"] = state ? state.customZoneMappings : undefined;
            resourceInputs["managedNamespaces"] = state ? state.managedNamespaces : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["customZoneMappings"] = args ? args.customZoneMappings : undefined;
            resourceInputs["managedNamespaces"] = args ? args.managedNamespaces : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["customZoneMapping"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GlobalClusterConfig.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GlobalClusterConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GlobalClusterConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalClusterConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalClusterConfig.__pulumiType;
    }
}
exports.GlobalClusterConfig = GlobalClusterConfig;
/** @internal */
GlobalClusterConfig.__pulumiType = 'mongodbatlas:index/globalClusterConfig:GlobalClusterConfig';
//# sourceMappingURL=globalClusterConfig.js.map