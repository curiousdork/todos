import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "./types";
/**
 * **WARNING:** This datasource is deprecated, use `mongodbatlasCloudBackupSnapshots`
 *
 * `mongodbatlas.getCloudProviderSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot("testCloudProviderSnapshot", {
 *     groupId: "5d0f1f73cf09a29120e173cf",
 *     clusterName: "MyClusterTest",
 *     description: "SomeDescription",
 *     retentionInDays: 1,
 * });
 * const testCloudProviderSnapshots = mongodbatlas.getCloudProviderSnapshots({
 *     groupId: mongodbatlas_cloud_provider_snapshots.test.group_id,
 *     clusterName: mongodbatlas_cloud_provider_snapshots.test.cluster_name,
 *     pageNum: 1,
 *     itemsPerPage: 5,
 * });
 * ```
 */
export declare function getCloudProviderSnapshots(args: GetCloudProviderSnapshotsArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudProviderSnapshotsResult>;
/**
 * A collection of arguments for invoking getCloudProviderSnapshots.
 */
export interface GetCloudProviderSnapshotsArgs {
    /**
     * The name of the Atlas cluster that contains the snapshot you want to retrieve.
     */
    clusterName: string;
    /**
     * Number of items to return per page, up to a maximum of 500. Defaults to `100`.
     */
    itemsPerPage?: number;
    /**
     * The page to return. Defaults to `1`.
     */
    pageNum?: number;
    projectId: string;
}
/**
 * A collection of values returned by getCloudProviderSnapshots.
 */
export interface GetCloudProviderSnapshotsResult {
    readonly clusterName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly itemsPerPage?: number;
    readonly pageNum?: number;
    readonly projectId: string;
    /**
     * Includes cloudProviderSnapshot object for each item detailed in the results array section.
     */
    readonly results: outputs.GetCloudProviderSnapshotsResult[];
    readonly totalCount: number;
}
export declare function getCloudProviderSnapshotsOutput(args: GetCloudProviderSnapshotsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudProviderSnapshotsResult>;
/**
 * A collection of arguments for invoking getCloudProviderSnapshots.
 */
export interface GetCloudProviderSnapshotsOutputArgs {
    /**
     * The name of the Atlas cluster that contains the snapshot you want to retrieve.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Number of items to return per page, up to a maximum of 500. Defaults to `100`.
     */
    itemsPerPage?: pulumi.Input<number>;
    /**
     * The page to return. Defaults to `1`.
     */
    pageNum?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
}
