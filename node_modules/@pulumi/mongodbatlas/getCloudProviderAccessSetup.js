"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCloudProviderAccessSetupOutput = exports.getCloudProviderAccessSetup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS is supported.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("testRole", {
 *     projectId: "<PROJECT-ID>",
 *     providerName: "AWS",
 * });
 * const singleSetup = mongodbatlas.getCloudProviderAccessSetupOutput({
 *     projectId: testRole.projectId,
 *     providerName: testRole.providerName,
 *     roleId: testRole.roleId,
 * });
 * ```
 */
function getCloudProviderAccessSetup(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", {
        "projectId": args.projectId,
        "providerName": args.providerName,
        "roleId": args.roleId,
    }, opts);
}
exports.getCloudProviderAccessSetup = getCloudProviderAccessSetup;
function getCloudProviderAccessSetupOutput(args, opts) {
    return pulumi.output(args).apply(a => getCloudProviderAccessSetup(a, opts));
}
exports.getCloudProviderAccessSetupOutput = getCloudProviderAccessSetupOutput;
//# sourceMappingURL=getCloudProviderAccessSetup.js.map