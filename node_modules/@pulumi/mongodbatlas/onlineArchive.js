"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnlineArchive = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.OnlineArchive` resource provides access to create, edit, pause and resume an online archive for a collection.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:** The collection must exists before performing an online archive.
 *
 * > **IMPORTANT:** There are fields that are immutable after creation, i.e if `dateField` value does not exist in the collection, the online archive state will be pending forever, and this field cannot be updated, that means a destroy is required, known error `ONLINE_ARCHIVE_CANNOT_MODIFY_FIELD`
 *
 * ## Example Usage
 * ### S
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.OnlineArchive("test", {
 *     projectId: _var.project_id,
 *     clusterName: _var.cluster_name,
 *     collName: _var.collection_name,
 *     dbName: _var.database_name,
 *     partitionFields: [
 *         {
 *             fieldName: "firstName",
 *             order: 0,
 *         },
 *         {
 *             fieldName: "lastName",
 *             order: 1,
 *         },
 *     ],
 *     criteria: {
 *         type: "DATE",
 *         dateField: "created",
 *         expireAfterDays: 5,
 *     },
 * });
 * ```
 *
 * For custom criteria example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.OnlineArchive("test", {
 *     projectId: _var.project_id,
 *     clusterName: _var.cluster_name,
 *     collName: _var.collection_name,
 *     dbName: _var.database_name,
 *     partitionFields: [{
 *         fieldName: "firstName",
 *         order: 0,
 *     }],
 *     partitionsFields: [{
 *         fieldName: "secondName",
 *         order: 1,
 *     }],
 *     criteria: {
 *         type: "CUSTOM",
 *         query: "{ \"department\": \"engineering\" }",
 *     },
 * });
 * ```
 */
class OnlineArchive extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["archiveId"] = state ? state.archiveId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["collName"] = state ? state.collName : undefined;
            resourceInputs["criteria"] = state ? state.criteria : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["partitionFields"] = state ? state.partitionFields : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["syncCreation"] = state ? state.syncCreation : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.collName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collName'");
            }
            if ((!args || args.criteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["collName"] = args ? args.collName : undefined;
            resourceInputs["criteria"] = args ? args.criteria : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["partitionFields"] = args ? args.partitionFields : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["syncCreation"] = args ? args.syncCreation : undefined;
            resourceInputs["archiveId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(OnlineArchive.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing OnlineArchive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OnlineArchive(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OnlineArchive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OnlineArchive.__pulumiType;
    }
}
exports.OnlineArchive = OnlineArchive;
/** @internal */
OnlineArchive.__pulumiType = 'mongodbatlas:index/onlineArchive:OnlineArchive';
//# sourceMappingURL=onlineArchive.js.map