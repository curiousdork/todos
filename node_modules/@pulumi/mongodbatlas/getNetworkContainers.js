"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkContainersOutput = exports.getNetworkContainers = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 * ### Basic Example.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("testNetworkContainer", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     atlasCidrBlock: "10.8.0.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * const testNetworkContainers = pulumi.all([testNetworkContainer.projectId, testNetworkContainer.providerName]).apply(([projectId, providerName]) => mongodbatlas.getNetworkContainersOutput({
 *     projectId: projectId,
 *     providerName: providerName,
 * }));
 * ```
 */
function getNetworkContainers(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("mongodbatlas:index/getNetworkContainers:getNetworkContainers", {
        "projectId": args.projectId,
        "providerName": args.providerName,
    }, opts);
}
exports.getNetworkContainers = getNetworkContainers;
function getNetworkContainersOutput(args, opts) {
    return pulumi.output(args).apply(a => getNetworkContainers(a, opts));
}
exports.getNetworkContainersOutput = getNetworkContainersOutput;
//# sourceMappingURL=getNetworkContainers.js.map