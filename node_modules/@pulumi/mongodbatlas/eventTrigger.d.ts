import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * `mongodbatlas.EventTrigger` provides a Event Trigger resource.
 *
 * ## Example Usage
 *
 * ### S
 * ### Example Usage: Database Trigger with Function
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     projectId: "PROJECT ID",
 *     appId: "APPLICATION ID",
 *     type: "DATABASE",
 *     functionId: "FUNCTION ID",
 *     disabled: false,
 *     configOperationTypes: [
 *         "INSERT",
 *         "UPDATE",
 *     ],
 *     configDatabase: "DATABASE NAME",
 *     configCollection: "COLLECTION NAME",
 *     configServiceId: "SERVICE ID",
 *     configMatch: `{
 *   "updateDescription.updatedFields": {
 *     "status": "blocked"
 *   }
 * }
 * `,
 *     configProject: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configFullDocument: false,
 *     configFullDocumentBefore: false,
 *     eventProcessors: {
 *         awsEventbridge: {
 *             configAccountId: "AWS ACCOUNT ID",
 *             configRegion: "AWS REGIOn",
 *         },
 *     },
 * });
 * ```
 * ### Example Usage: Database Trigger with EventBridge
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configCollection: "COLLECTION NAME",
 *     configDatabase: "DATABASE NAME",
 *     configFullDocument: false,
 *     configFullDocumentBefore: false,
 *     configMatch: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configOperationType: "LOGIN",
 *     configOperationTypes: [
 *         "INSERT",
 *         "UPDATE",
 *     ],
 *     configProject: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configProviders: ["anon-user"],
 *     configSchedule: "*",
 *     configServiceId: "1",
 *     disabled: false,
 *     eventProcessors: {
 *         awsEventbridge: {
 *             configAccountId: "AWS ACCOUNT ID",
 *             configRegion: "AWS REGIOn",
 *         },
 *     },
 *     projectId: "PROJECT ID",
 *     type: "DATABASE",
 * });
 * ```
 * ### Example Usage: Authentication Trigger
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configOperationType: "LOGIN",
 *     configProviders: ["anon-user"],
 *     disabled: false,
 *     functionId: "1",
 *     projectId: "PROJECT ID",
 *     type: "AUTHENTICATION",
 * });
 * ```
 * ### Example Usage: Scheduled Trigger
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configSchedule: "*",
 *     disabled: false,
 *     functionId: "1",
 *     projectId: "PROJECT ID",
 *     type: "SCHEDULED",
 * });
 * ```
 *
 * ## Import
 *
 * Event trigger can be imported using project ID, App ID and Trigger ID, in the format `project_id`--`app_id`-`trigger_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/eventTrigger:EventTrigger test 1112222b3bf99403840e8934--testing-example--1112222b3bf99403840e8934
 * ```
 */
export declare class EventTrigger extends pulumi.CustomResource {
    /**
     * Get an existing EventTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventTriggerState, opts?: pulumi.CustomResourceOptions): EventTrigger;
    /**
     * Returns true if the given object is an instance of EventTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is EventTrigger;
    /**
     * The ObjectID of your application.
     */
    readonly appId: pulumi.Output<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     */
    readonly configCollection: pulumi.Output<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     */
    readonly configDatabase: pulumi.Output<string>;
    /**
     * Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     */
    readonly configFullDocument: pulumi.Output<boolean>;
    readonly configFullDocumentBefore: pulumi.Output<boolean>;
    /**
     * Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     */
    readonly configMatch: pulumi.Output<string>;
    /**
     * Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     */
    readonly configOperationType: pulumi.Output<string>;
    /**
     * Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     */
    readonly configOperationTypes: pulumi.Output<string[]>;
    /**
     * Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     */
    readonly configProject: pulumi.Output<string>;
    /**
     * Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     */
    readonly configProviders: pulumi.Output<string[]>;
    /**
     * Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     */
    readonly configSchedule: pulumi.Output<string>;
    readonly configScheduleType: pulumi.Output<string>;
    /**
     * Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     */
    readonly configServiceId: pulumi.Output<string>;
    /**
     * Default: `false` If `true`, the trigger is disabled.
     */
    readonly disabled: pulumi.Output<boolean>;
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
     */
    readonly eventProcessors: pulumi.Output<outputs.EventTriggerEventProcessors | undefined>;
    /**
     * The ID of the function associated with the trigger.
     */
    readonly functionId: pulumi.Output<string | undefined>;
    /**
     * The name of the function associated with the trigger.
     */
    readonly functionName: pulumi.Output<string>;
    /**
     * The name of the trigger.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The unique ID for the project to create the trigger.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * The unique ID of the trigger.
     */
    readonly triggerId: pulumi.Output<string>;
    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a EventTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventTriggerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering EventTrigger resources.
 */
export interface EventTriggerState {
    /**
     * The ObjectID of your application.
     */
    appId?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     */
    configCollection?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     */
    configDatabase?: pulumi.Input<string>;
    /**
     * Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     */
    configFullDocument?: pulumi.Input<boolean>;
    configFullDocumentBefore?: pulumi.Input<boolean>;
    /**
     * Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     */
    configMatch?: pulumi.Input<string>;
    /**
     * Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     */
    configOperationType?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     */
    configOperationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     */
    configProject?: pulumi.Input<string>;
    /**
     * Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     */
    configProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     */
    configSchedule?: pulumi.Input<string>;
    configScheduleType?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     */
    configServiceId?: pulumi.Input<string>;
    /**
     * Default: `false` If `true`, the trigger is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
     */
    eventProcessors?: pulumi.Input<inputs.EventTriggerEventProcessors>;
    /**
     * The ID of the function associated with the trigger.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The name of the function associated with the trigger.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the project to create the trigger.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The unique ID of the trigger.
     */
    triggerId?: pulumi.Input<string>;
    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     */
    type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a EventTrigger resource.
 */
export interface EventTriggerArgs {
    /**
     * The ObjectID of your application.
     */
    appId: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     */
    configCollection?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     */
    configDatabase?: pulumi.Input<string>;
    /**
     * Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     */
    configFullDocument?: pulumi.Input<boolean>;
    configFullDocumentBefore?: pulumi.Input<boolean>;
    /**
     * Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     */
    configMatch?: pulumi.Input<string>;
    /**
     * Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     */
    configOperationType?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     */
    configOperationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     */
    configProject?: pulumi.Input<string>;
    /**
     * Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     */
    configProviders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     */
    configSchedule?: pulumi.Input<string>;
    /**
     * Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     */
    configServiceId?: pulumi.Input<string>;
    /**
     * Default: `false` If `true`, the trigger is disabled.
     */
    disabled?: pulumi.Input<boolean>;
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
     */
    eventProcessors?: pulumi.Input<inputs.EventTriggerEventProcessors>;
    /**
     * The ID of the function associated with the trigger.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the project to create the trigger.
     */
    projectId: pulumi.Input<string>;
    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     */
    type: pulumi.Input<string>;
}
