"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchIndex = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.SearchIndex` provides a Search Index resource. This allows indexes to be created.
 *
 * ## Example Usage
 * ### Basic
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.SearchIndex("test", {
 *     analyzer: "lucene.standard",
 *     clusterName: "<CLUSTER_NAME>",
 *     collectionName: "collection_test",
 *     database: "database_test",
 *     mappingsDynamic: true,
 *     projectId: "<PROJECT_ID>",
 *     searchAnalyzer: "lucene.standard",
 * });
 * ```
 * ### Advanced (with custom analyzers)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.SearchIndex("test", {
 *     projectId: `%[1]s`,
 *     clusterName: `%[2]s`,
 *     analyzer: "lucene.standard",
 *     collectionName: "collection_test",
 *     database: "database_test",
 *     mappingsDynamic: false,
 *     mappingsFields: `{
 *       "address": {
 *         "type": "document",
 *         "fields": {
 *           "city": {
 *             "type": "string",
 *             "analyzer": "lucene.simple",
 *             "ignoreAbove": 255
 *           },
 *           "state": {
 *             "type": "string",
 *             "analyzer": "lucene.english"
 *           }
 *         }
 *       },
 *       "company": {
 *         "type": "string",
 *         "analyzer": "lucene.whitespace",
 *         "multi": {
 *           "mySecondaryAnalyzer": {
 *             "type": "string",
 *             "analyzer": "lucene.french"
 *           }
 *         }
 *       },
 *       "employees": {
 *         "type": "string",
 *         "analyzer": "lucene.standard"
 *       }
 * }
 * `,
 *     searchAnalyzer: "lucene.standard",
 *     analyzers: ` [{
 *  "name": "index_analyzer_test_name",
 *  "char_filters": {
 * "type": "mapping",
 * "mappings": {"\\" : "/"}
 *    	},
 *  "tokenizer": {
 *  "type": "nGram",
 *  "min_gram": 2,
 *  "max_gram": 5
 * 	},
 *  "token_filters": {
 * "type": "length",
 * "min": 20,
 * "max": 33
 *    	}
 *  }]
 * `,
 *     synonyms: [{
 *         analyzer: "lucene.simple",
 *         name: "synonym_test",
 *         sourceCollection: "collection_test",
 *     }],
 * });
 * ```
 */
class SearchIndex extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["analyzer"] = state ? state.analyzer : undefined;
            resourceInputs["analyzers"] = state ? state.analyzers : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["collectionName"] = state ? state.collectionName : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["indexId"] = state ? state.indexId : undefined;
            resourceInputs["mappingsDynamic"] = state ? state.mappingsDynamic : undefined;
            resourceInputs["mappingsFields"] = state ? state.mappingsFields : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["searchAnalyzer"] = state ? state.searchAnalyzer : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["synonyms"] = state ? state.synonyms : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.analyzer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analyzer'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.collectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collectionName'");
            }
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["analyzer"] = args ? args.analyzer : undefined;
            resourceInputs["analyzers"] = args ? args.analyzers : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["collectionName"] = args ? args.collectionName : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["mappingsDynamic"] = args ? args.mappingsDynamic : undefined;
            resourceInputs["mappingsFields"] = args ? args.mappingsFields : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["searchAnalyzer"] = args ? args.searchAnalyzer : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["synonyms"] = args ? args.synonyms : undefined;
            resourceInputs["indexId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SearchIndex.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SearchIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SearchIndex(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SearchIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SearchIndex.__pulumiType;
    }
}
exports.SearchIndex = SearchIndex;
/** @internal */
SearchIndex.__pulumiType = 'mongodbatlas:index/searchIndex:SearchIndex';
//# sourceMappingURL=searchIndex.js.map