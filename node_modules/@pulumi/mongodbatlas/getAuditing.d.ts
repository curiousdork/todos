import * as pulumi from "@pulumi/pulumi";
/**
 * `mongodbatlas.Auditing` describes a Auditing.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 */
export declare function getAuditing(args: GetAuditingArgs, opts?: pulumi.InvokeOptions): Promise<GetAuditingResult>;
/**
 * A collection of arguments for invoking getAuditing.
 */
export interface GetAuditingArgs {
    /**
     * The unique ID for the project to create the database user.
     */
    projectId: string;
}
/**
 * A collection of values returned by getAuditing.
 */
export interface GetAuditingResult {
    /**
     * JSON-formatted audit filter used by the project
     */
    readonly auditAuthorizationSuccess: boolean;
    /**
     * Indicates whether the auditing system captures successful authentication attempts for audit filters using the "atype" : "authCheck" auditing event. For more information, see auditAuthorizationSuccess
     */
    readonly auditFilter: string;
    /**
     * Denotes the configuration method for the audit filter. Possible values are: NONE - auditing not configured for the project.m FILTER_BUILDER - auditing configured via Atlas UI filter builderm FILTER_JSON - auditing configured via Atlas custom filter or API.
     */
    readonly configurationType: string;
    /**
     * Denotes whether or not the project associated with the {GROUP-ID} has database auditing enabled.
     */
    readonly enabled: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly projectId: string;
}
export declare function getAuditingOutput(args: GetAuditingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuditingResult>;
/**
 * A collection of arguments for invoking getAuditing.
 */
export interface GetAuditingOutputArgs {
    /**
     * The unique ID for the project to create the database user.
     */
    projectId: pulumi.Input<string>;
}
