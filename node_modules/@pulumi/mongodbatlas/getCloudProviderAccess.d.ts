import * as pulumi from "@pulumi/pulumi";
import { output as outputs } from "./types";
/**
 * `mongodbatlas.CloudProviderAccess` allows you to get the list of cloud provider access roles, currently only AWS is supported.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccess("testRole", {
 *     projectId: "<PROJECT-ID>",
 *     providerName: "AWS",
 * });
 * const all = mongodbatlas.getCloudProviderAccessOutput({
 *     projectId: testRole.projectId,
 * });
 * ```
 */
export declare function getCloudProviderAccess(args: GetCloudProviderAccessArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudProviderAccessResult>;
/**
 * A collection of arguments for invoking getCloudProviderAccess.
 */
export interface GetCloudProviderAccessArgs {
    /**
     * The unique ID for the project to get all Cloud Provider Access
     */
    projectId: string;
}
/**
 * A collection of values returned by getCloudProviderAccess.
 */
export interface GetCloudProviderAccessResult {
    /**
     * A list where each represents a Cloud Provider Access Role.
     */
    readonly awsIamRoles: outputs.GetCloudProviderAccessAwsIamRole[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly projectId: string;
}
export declare function getCloudProviderAccessOutput(args: GetCloudProviderAccessOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudProviderAccessResult>;
/**
 * A collection of arguments for invoking getCloudProviderAccess.
 */
export interface GetCloudProviderAccessOutputArgs {
    /**
     * The unique ID for the project to get all Cloud Provider Access
     */
    projectId: pulumi.Input<string>;
}
