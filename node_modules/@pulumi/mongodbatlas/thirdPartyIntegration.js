"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyIntegration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Third-Party Integration Settings can be imported using project ID and the integration type, in the format `project_id`-`type`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration my_user 1112222b3bf99403840e8934-OPS_GENIE
 * ```
 *
 *  See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/third-party-integration-settings-create/) Documentation for more information.
 */
class ThirdPartyIntegration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["flowName"] = state ? state.flowName : undefined;
            resourceInputs["licenseKey"] = state ? state.licenseKey : undefined;
            resourceInputs["orgName"] = state ? state.orgName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["readToken"] = state ? state.readToken : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routingKey"] = state ? state.routingKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["teamName"] = state ? state.teamName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["writeToken"] = state ? state.writeToken : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["flowName"] = args ? args.flowName : undefined;
            resourceInputs["licenseKey"] = args ? args.licenseKey : undefined;
            resourceInputs["orgName"] = args ? args.orgName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["readToken"] = args ? args.readToken : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingKey"] = args ? args.routingKey : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["serviceKey"] = args ? args.serviceKey : undefined;
            resourceInputs["teamName"] = args ? args.teamName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["writeToken"] = args ? args.writeToken : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ThirdPartyIntegration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ThirdPartyIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ThirdPartyIntegration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ThirdPartyIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThirdPartyIntegration.__pulumiType;
    }
}
exports.ThirdPartyIntegration = ThirdPartyIntegration;
/** @internal */
ThirdPartyIntegration.__pulumiType = 'mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration';
//# sourceMappingURL=thirdPartyIntegration.js.map