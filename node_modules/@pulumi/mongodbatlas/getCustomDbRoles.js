"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomDbRolesOutput = exports.getCustomDbRoles = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatabaseUser = new mongodbatlas.DatabaseUser("testDatabaseUser", {
 *     username: "test-acc-username",
 *     password: "test-acc-password",
 *     projectId: "<PROJECT-ID>",
 *     databaseName: "admin",
 *     roles: [
 *         {
 *             roleName: "readWrite",
 *             databaseName: "admin",
 *         },
 *         {
 *             roleName: "atlasAdmin",
 *             databaseName: "admin",
 *         },
 *     ],
 * });
 * const testCustomDbRoles = mongodbatlas.getCustomDbRoles({
 *     projectId: mongodbatlas_custom_db_role.test.project_id,
 * });
 * ```
 */
function getCustomDbRoles(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("mongodbatlas:index/getCustomDbRoles:getCustomDbRoles", {
        "projectId": args.projectId,
    }, opts);
}
exports.getCustomDbRoles = getCustomDbRoles;
function getCustomDbRolesOutput(args, opts) {
    return pulumi.output(args).apply(a => getCustomDbRoles(a, opts));
}
exports.getCustomDbRolesOutput = getCustomDbRolesOutput;
//# sourceMappingURL=getCustomDbRoles.js.map