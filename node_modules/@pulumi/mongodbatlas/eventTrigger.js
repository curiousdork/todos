"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventTrigger = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `mongodbatlas.EventTrigger` provides a Event Trigger resource.
 *
 * ## Example Usage
 *
 * ### S
 * ### Example Usage: Database Trigger with Function
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     projectId: "PROJECT ID",
 *     appId: "APPLICATION ID",
 *     type: "DATABASE",
 *     functionId: "FUNCTION ID",
 *     disabled: false,
 *     configOperationTypes: [
 *         "INSERT",
 *         "UPDATE",
 *     ],
 *     configDatabase: "DATABASE NAME",
 *     configCollection: "COLLECTION NAME",
 *     configServiceId: "SERVICE ID",
 *     configMatch: `{
 *   "updateDescription.updatedFields": {
 *     "status": "blocked"
 *   }
 * }
 * `,
 *     configProject: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configFullDocument: false,
 *     configFullDocumentBefore: false,
 *     eventProcessors: {
 *         awsEventbridge: {
 *             configAccountId: "AWS ACCOUNT ID",
 *             configRegion: "AWS REGIOn",
 *         },
 *     },
 * });
 * ```
 * ### Example Usage: Database Trigger with EventBridge
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configCollection: "COLLECTION NAME",
 *     configDatabase: "DATABASE NAME",
 *     configFullDocument: false,
 *     configFullDocumentBefore: false,
 *     configMatch: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configOperationType: "LOGIN",
 *     configOperationTypes: [
 *         "INSERT",
 *         "UPDATE",
 *     ],
 *     configProject: "{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}",
 *     configProviders: ["anon-user"],
 *     configSchedule: "*",
 *     configServiceId: "1",
 *     disabled: false,
 *     eventProcessors: {
 *         awsEventbridge: {
 *             configAccountId: "AWS ACCOUNT ID",
 *             configRegion: "AWS REGIOn",
 *         },
 *     },
 *     projectId: "PROJECT ID",
 *     type: "DATABASE",
 * });
 * ```
 * ### Example Usage: Authentication Trigger
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configOperationType: "LOGIN",
 *     configProviders: ["anon-user"],
 *     disabled: false,
 *     functionId: "1",
 *     projectId: "PROJECT ID",
 *     type: "AUTHENTICATION",
 * });
 * ```
 * ### Example Usage: Scheduled Trigger
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.EventTrigger("test", {
 *     appId: "APPLICATION ID",
 *     configSchedule: "*",
 *     disabled: false,
 *     functionId: "1",
 *     projectId: "PROJECT ID",
 *     type: "SCHEDULED",
 * });
 * ```
 *
 * ## Import
 *
 * Event trigger can be imported using project ID, App ID and Trigger ID, in the format `project_id`--`app_id`-`trigger_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/eventTrigger:EventTrigger test 1112222b3bf99403840e8934--testing-example--1112222b3bf99403840e8934
 * ```
 */
class EventTrigger extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["configCollection"] = state ? state.configCollection : undefined;
            resourceInputs["configDatabase"] = state ? state.configDatabase : undefined;
            resourceInputs["configFullDocument"] = state ? state.configFullDocument : undefined;
            resourceInputs["configFullDocumentBefore"] = state ? state.configFullDocumentBefore : undefined;
            resourceInputs["configMatch"] = state ? state.configMatch : undefined;
            resourceInputs["configOperationType"] = state ? state.configOperationType : undefined;
            resourceInputs["configOperationTypes"] = state ? state.configOperationTypes : undefined;
            resourceInputs["configProject"] = state ? state.configProject : undefined;
            resourceInputs["configProviders"] = state ? state.configProviders : undefined;
            resourceInputs["configSchedule"] = state ? state.configSchedule : undefined;
            resourceInputs["configScheduleType"] = state ? state.configScheduleType : undefined;
            resourceInputs["configServiceId"] = state ? state.configServiceId : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["eventProcessors"] = state ? state.eventProcessors : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["configCollection"] = args ? args.configCollection : undefined;
            resourceInputs["configDatabase"] = args ? args.configDatabase : undefined;
            resourceInputs["configFullDocument"] = args ? args.configFullDocument : undefined;
            resourceInputs["configFullDocumentBefore"] = args ? args.configFullDocumentBefore : undefined;
            resourceInputs["configMatch"] = args ? args.configMatch : undefined;
            resourceInputs["configOperationType"] = args ? args.configOperationType : undefined;
            resourceInputs["configOperationTypes"] = args ? args.configOperationTypes : undefined;
            resourceInputs["configProject"] = args ? args.configProject : undefined;
            resourceInputs["configProviders"] = args ? args.configProviders : undefined;
            resourceInputs["configSchedule"] = args ? args.configSchedule : undefined;
            resourceInputs["configServiceId"] = args ? args.configServiceId : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eventProcessors"] = args ? args.eventProcessors : undefined;
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["configScheduleType"] = undefined /*out*/;
            resourceInputs["functionName"] = undefined /*out*/;
            resourceInputs["triggerId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(EventTrigger.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EventTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventTrigger(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventTrigger.__pulumiType;
    }
}
exports.EventTrigger = EventTrigger;
/** @internal */
EventTrigger.__pulumiType = 'mongodbatlas:index/eventTrigger:EventTrigger';
//# sourceMappingURL=eventTrigger.js.map