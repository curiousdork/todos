"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCloudProviderSnapshotsOutput = exports.getCloudProviderSnapshots = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * **WARNING:** This datasource is deprecated, use `mongodbatlasCloudBackupSnapshots`
 *
 * `mongodbatlas.getCloudProviderSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot("testCloudProviderSnapshot", {
 *     groupId: "5d0f1f73cf09a29120e173cf",
 *     clusterName: "MyClusterTest",
 *     description: "SomeDescription",
 *     retentionInDays: 1,
 * });
 * const testCloudProviderSnapshots = mongodbatlas.getCloudProviderSnapshots({
 *     groupId: mongodbatlas_cloud_provider_snapshots.test.group_id,
 *     clusterName: mongodbatlas_cloud_provider_snapshots.test.cluster_name,
 *     pageNum: 1,
 *     itemsPerPage: 5,
 * });
 * ```
 */
function getCloudProviderSnapshots(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("mongodbatlas:index/getCloudProviderSnapshots:getCloudProviderSnapshots", {
        "clusterName": args.clusterName,
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
        "projectId": args.projectId,
    }, opts);
}
exports.getCloudProviderSnapshots = getCloudProviderSnapshots;
function getCloudProviderSnapshotsOutput(args, opts) {
    return pulumi.output(args).apply(a => getCloudProviderSnapshots(a, opts));
}
exports.getCloudProviderSnapshotsOutput = getCloudProviderSnapshotsOutput;
//# sourceMappingURL=getCloudProviderSnapshots.js.map