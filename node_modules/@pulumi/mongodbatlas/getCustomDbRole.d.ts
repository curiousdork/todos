import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
/**
 * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CustomDbRole("testRole", {
 *     projectId: "<PROJECT-ID>",
 *     roleName: "myCustomRole",
 *     actions: [
 *         {
 *             action: "UPDATE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "INSERT",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *     ],
 * });
 * const test = mongodbatlas.getCustomDbRoleOutput({
 *     projectId: testRole.projectId,
 *     roleName: testRole.roleName,
 * });
 * ```
 */
export declare function getCustomDbRole(args: GetCustomDbRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetCustomDbRoleResult>;
/**
 * A collection of arguments for invoking getCustomDbRole.
 */
export interface GetCustomDbRoleArgs {
    inheritedRoles?: inputs.GetCustomDbRoleInheritedRole[];
    /**
     * The unique ID for the project to create the database user.
     */
    projectId: string;
    /**
     * Name of the custom role.
     */
    roleName: string;
}
/**
 * A collection of values returned by getCustomDbRole.
 */
export interface GetCustomDbRoleResult {
    readonly actions: outputs.GetCustomDbRoleAction[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly inheritedRoles?: outputs.GetCustomDbRoleInheritedRole[];
    readonly projectId: string;
    readonly roleName: string;
}
export declare function getCustomDbRoleOutput(args: GetCustomDbRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCustomDbRoleResult>;
/**
 * A collection of arguments for invoking getCustomDbRole.
 */
export interface GetCustomDbRoleOutputArgs {
    inheritedRoles?: pulumi.Input<pulumi.Input<inputs.GetCustomDbRoleInheritedRoleArgs>[]>;
    /**
     * The unique ID for the project to create the database user.
     */
    projectId: pulumi.Input<string>;
    /**
     * Name of the custom role.
     */
    roleName: pulumi.Input<string>;
}
