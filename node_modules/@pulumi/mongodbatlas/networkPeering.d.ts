import * as pulumi from "@pulumi/pulumi";
/**
 * ## Import
 *
 * Clusters can be imported using project ID and network peering id, in the format `PROJECTID-PEERID-PROVIDERNAME`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/networkPeering:NetworkPeering my_peering 1112222b3bf99403840e8934-5cbf563d87d9d67253be590a-AWS
 * ```
 *
 *  See detailed information for arguments and attributes[MongoDB API Network Peering Connection](https://docs.atlas.mongodb.com/reference/api/vpc-create-peering-connection/)
 */
export declare class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPeeringState, opts?: pulumi.CustomResourceOptions): NetworkPeering;
    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is NetworkPeering;
    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    readonly accepterRegionName: pulumi.Output<string>;
    readonly atlasCidrBlock: pulumi.Output<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    readonly atlasGcpProjectId: pulumi.Output<string>;
    readonly atlasId: pulumi.Output<string>;
    readonly atlasVpcName: pulumi.Output<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    readonly awsAccountId: pulumi.Output<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    readonly azureDirectoryId: pulumi.Output<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    readonly azureSubscriptionId: pulumi.Output<string>;
    /**
     * Unique identifier of the Atlas network peering container.
     */
    readonly connectionId: pulumi.Output<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    readonly containerId: pulumi.Output<string>;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    readonly errorMessage: pulumi.Output<string>;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    readonly errorState: pulumi.Output<string>;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    readonly errorStateName: pulumi.Output<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    readonly gcpProjectId: pulumi.Output<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    readonly networkName: pulumi.Output<string>;
    /**
     * Unique identifier of the Atlas network peer.
     */
    readonly peerId: pulumi.Output<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    readonly providerName: pulumi.Output<string>;
    /**
     * Name of your Azure resource group.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    readonly routeTableCidrBlock: pulumi.Output<string>;
    /**
     * Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     */
    readonly status: pulumi.Output<string>;
    /**
     * (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    readonly statusName: pulumi.Output<string>;
    /**
     * Name of your Azure VNet.
     */
    readonly vnetName: pulumi.Output<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    readonly vpcId: pulumi.Output<string>;
    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering NetworkPeering resources.
 */
export interface NetworkPeeringState {
    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    accepterRegionName?: pulumi.Input<string>;
    atlasCidrBlock?: pulumi.Input<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    atlasGcpProjectId?: pulumi.Input<string>;
    atlasId?: pulumi.Input<string>;
    atlasVpcName?: pulumi.Input<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    azureDirectoryId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Atlas network peering container.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    containerId?: pulumi.Input<string>;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    errorState?: pulumi.Input<string>;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    errorStateName?: pulumi.Input<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    networkName?: pulumi.Input<string>;
    /**
     * Unique identifier of the Atlas network peer.
     */
    peerId?: pulumi.Input<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    providerName?: pulumi.Input<string>;
    /**
     * Name of your Azure resource group.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    routeTableCidrBlock?: pulumi.Input<string>;
    /**
     * Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     */
    status?: pulumi.Input<string>;
    /**
     * (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    statusName?: pulumi.Input<string>;
    /**
     * Name of your Azure VNet.
     */
    vnetName?: pulumi.Input<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    vpcId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    accepterRegionName?: pulumi.Input<string>;
    atlasCidrBlock?: pulumi.Input<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    atlasGcpProjectId?: pulumi.Input<string>;
    atlasVpcName?: pulumi.Input<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    azureDirectoryId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    containerId: pulumi.Input<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    gcpProjectId?: pulumi.Input<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    networkName?: pulumi.Input<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    projectId: pulumi.Input<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    providerName: pulumi.Input<string>;
    /**
     * Name of your Azure resource group.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    routeTableCidrBlock?: pulumi.Input<string>;
    /**
     * Name of your Azure VNet.
     */
    vnetName?: pulumi.Input<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    vpcId?: pulumi.Input<string>;
}
