"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLake = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Data Lake can be imported using project ID, name of the data lake and name of the AWS s3 bucket, in the format `project_id`--`name`--`aws_test_s3_bucket`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/dataLake:DataLake example 1112222b3bf99403840e8934--test-data-lake--s3-test
 * ```
 *
 *  See [MongoDB Atlas API](https://docs.mongodb.com/datalake/reference/api/dataLakes-create-one-tenant) Documentation for more information.
 */
class DataLake extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["dataProcessRegion"] = state ? state.dataProcessRegion : undefined;
            resourceInputs["hostnames"] = state ? state.hostnames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageDatabases"] = state ? state.storageDatabases : undefined;
            resourceInputs["storageStores"] = state ? state.storageStores : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.aws === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aws'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["dataProcessRegion"] = args ? args.dataProcessRegion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["hostnames"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["storageDatabases"] = undefined /*out*/;
            resourceInputs["storageStores"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(DataLake.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DataLake resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataLake(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataLake.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLake.__pulumiType;
    }
}
exports.DataLake = DataLake;
/** @internal */
DataLake.__pulumiType = 'mongodbatlas:index/dataLake:DataLake';
//# sourceMappingURL=dataLake.js.map