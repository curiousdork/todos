"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./alertConfiguration"), exports);
__exportStar(require("./auditing"), exports);
__exportStar(require("./cloudBackupSchedule"), exports);
__exportStar(require("./cloudProviderAccess"), exports);
__exportStar(require("./cloudProviderAccessAuthorization"), exports);
__exportStar(require("./cloudProviderAccessSetup"), exports);
__exportStar(require("./cloudProviderSnapshot"), exports);
__exportStar(require("./cloudProviderSnapshotBackupPolicy"), exports);
__exportStar(require("./cloudProviderSnapshotRestoreJob"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./customDbRole"), exports);
__exportStar(require("./customDnsConfigurationClusterAws"), exports);
__exportStar(require("./dataLake"), exports);
__exportStar(require("./databaseUser"), exports);
__exportStar(require("./encryptionAtRest"), exports);
__exportStar(require("./eventTrigger"), exports);
__exportStar(require("./get509AuthenticationDatabaseUser"), exports);
__exportStar(require("./getAlertConfiguration"), exports);
__exportStar(require("./getAuditing"), exports);
__exportStar(require("./getCloudBackupSchedule"), exports);
__exportStar(require("./getCloudProviderAccess"), exports);
__exportStar(require("./getCloudProviderAccessSetup"), exports);
__exportStar(require("./getCloudProviderSnapshot"), exports);
__exportStar(require("./getCloudProviderSnapshotBackupPolicy"), exports);
__exportStar(require("./getCloudProviderSnapshotRestoreJob"), exports);
__exportStar(require("./getCloudProviderSnapshotRestoreJobs"), exports);
__exportStar(require("./getCloudProviderSnapshots"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getClusters"), exports);
__exportStar(require("./getCustomDbRole"), exports);
__exportStar(require("./getCustomDbRoles"), exports);
__exportStar(require("./getCustomDnsConfigurationClusterAws"), exports);
__exportStar(require("./getDataLake"), exports);
__exportStar(require("./getDataLakes"), exports);
__exportStar(require("./getDatabaseUser"), exports);
__exportStar(require("./getDatabaseUsers"), exports);
__exportStar(require("./getEventTrigger"), exports);
__exportStar(require("./getEventTriggers"), exports);
__exportStar(require("./getGlobalClusterConfig"), exports);
__exportStar(require("./getLdapConfiguration"), exports);
__exportStar(require("./getLdapVerify"), exports);
__exportStar(require("./getMaintenanceWindow"), exports);
__exportStar(require("./getNetworkContainer"), exports);
__exportStar(require("./getNetworkContainers"), exports);
__exportStar(require("./getNetworkPeering"), exports);
__exportStar(require("./getNetworkPeerings"), exports);
__exportStar(require("./getOnlineArchive"), exports);
__exportStar(require("./getOnlineArchives"), exports);
__exportStar(require("./getPrivateLinkEndpoint"), exports);
__exportStar(require("./getPrivateLinkEndpointService"), exports);
__exportStar(require("./getProject"), exports);
__exportStar(require("./getProjectIpAccessList"), exports);
__exportStar(require("./getProjects"), exports);
__exportStar(require("./getSearchIndex"), exports);
__exportStar(require("./getSearchIndexes"), exports);
__exportStar(require("./getTeam"), exports);
__exportStar(require("./getTeams"), exports);
__exportStar(require("./getThirdPartyIntegration"), exports);
__exportStar(require("./getThirdPartyIntegrations"), exports);
__exportStar(require("./globalClusterConfig"), exports);
__exportStar(require("./ldapConfiguration"), exports);
__exportStar(require("./ldapVerify"), exports);
__exportStar(require("./maintenanceWindow"), exports);
__exportStar(require("./networkContainer"), exports);
__exportStar(require("./networkPeering"), exports);
__exportStar(require("./onlineArchive"), exports);
__exportStar(require("./privateIpMode"), exports);
__exportStar(require("./privateLinkEndpoint"), exports);
__exportStar(require("./privateLinkEndpointService"), exports);
__exportStar(require("./project"), exports);
__exportStar(require("./projectIpAccessList"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./searchIndex"), exports);
__exportStar(require("./team"), exports);
__exportStar(require("./teams"), exports);
__exportStar(require("./thirdPartyIntegration"), exports);
__exportStar(require("./x509authenticationDatabaseUser"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const alertConfiguration_1 = require("./alertConfiguration");
const auditing_1 = require("./auditing");
const cloudBackupSchedule_1 = require("./cloudBackupSchedule");
const cloudProviderAccess_1 = require("./cloudProviderAccess");
const cloudProviderAccessAuthorization_1 = require("./cloudProviderAccessAuthorization");
const cloudProviderAccessSetup_1 = require("./cloudProviderAccessSetup");
const cloudProviderSnapshot_1 = require("./cloudProviderSnapshot");
const cloudProviderSnapshotBackupPolicy_1 = require("./cloudProviderSnapshotBackupPolicy");
const cloudProviderSnapshotRestoreJob_1 = require("./cloudProviderSnapshotRestoreJob");
const cluster_1 = require("./cluster");
const customDbRole_1 = require("./customDbRole");
const customDnsConfigurationClusterAws_1 = require("./customDnsConfigurationClusterAws");
const dataLake_1 = require("./dataLake");
const databaseUser_1 = require("./databaseUser");
const encryptionAtRest_1 = require("./encryptionAtRest");
const eventTrigger_1 = require("./eventTrigger");
const globalClusterConfig_1 = require("./globalClusterConfig");
const ldapConfiguration_1 = require("./ldapConfiguration");
const ldapVerify_1 = require("./ldapVerify");
const maintenanceWindow_1 = require("./maintenanceWindow");
const networkContainer_1 = require("./networkContainer");
const networkPeering_1 = require("./networkPeering");
const onlineArchive_1 = require("./onlineArchive");
const privateIpMode_1 = require("./privateIpMode");
const privateLinkEndpoint_1 = require("./privateLinkEndpoint");
const privateLinkEndpointService_1 = require("./privateLinkEndpointService");
const project_1 = require("./project");
const projectIpAccessList_1 = require("./projectIpAccessList");
const searchIndex_1 = require("./searchIndex");
const team_1 = require("./team");
const teams_1 = require("./teams");
const thirdPartyIntegration_1 = require("./thirdPartyIntegration");
const x509authenticationDatabaseUser_1 = require("./x509authenticationDatabaseUser");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "mongodbatlas:index/alertConfiguration:AlertConfiguration":
                return new alertConfiguration_1.AlertConfiguration(name, undefined, { urn });
            case "mongodbatlas:index/auditing:Auditing":
                return new auditing_1.Auditing(name, undefined, { urn });
            case "mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule":
                return new cloudBackupSchedule_1.CloudBackupSchedule(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderAccess:CloudProviderAccess":
                return new cloudProviderAccess_1.CloudProviderAccess(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization":
                return new cloudProviderAccessAuthorization_1.CloudProviderAccessAuthorization(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup":
                return new cloudProviderAccessSetup_1.CloudProviderAccessSetup(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot":
                return new cloudProviderSnapshot_1.CloudProviderSnapshot(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy":
                return new cloudProviderSnapshotBackupPolicy_1.CloudProviderSnapshotBackupPolicy(name, undefined, { urn });
            case "mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob":
                return new cloudProviderSnapshotRestoreJob_1.CloudProviderSnapshotRestoreJob(name, undefined, { urn });
            case "mongodbatlas:index/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "mongodbatlas:index/customDbRole:CustomDbRole":
                return new customDbRole_1.CustomDbRole(name, undefined, { urn });
            case "mongodbatlas:index/customDnsConfigurationClusterAws:CustomDnsConfigurationClusterAws":
                return new customDnsConfigurationClusterAws_1.CustomDnsConfigurationClusterAws(name, undefined, { urn });
            case "mongodbatlas:index/dataLake:DataLake":
                return new dataLake_1.DataLake(name, undefined, { urn });
            case "mongodbatlas:index/databaseUser:DatabaseUser":
                return new databaseUser_1.DatabaseUser(name, undefined, { urn });
            case "mongodbatlas:index/encryptionAtRest:EncryptionAtRest":
                return new encryptionAtRest_1.EncryptionAtRest(name, undefined, { urn });
            case "mongodbatlas:index/eventTrigger:EventTrigger":
                return new eventTrigger_1.EventTrigger(name, undefined, { urn });
            case "mongodbatlas:index/globalClusterConfig:GlobalClusterConfig":
                return new globalClusterConfig_1.GlobalClusterConfig(name, undefined, { urn });
            case "mongodbatlas:index/ldapConfiguration:LdapConfiguration":
                return new ldapConfiguration_1.LdapConfiguration(name, undefined, { urn });
            case "mongodbatlas:index/ldapVerify:LdapVerify":
                return new ldapVerify_1.LdapVerify(name, undefined, { urn });
            case "mongodbatlas:index/maintenanceWindow:MaintenanceWindow":
                return new maintenanceWindow_1.MaintenanceWindow(name, undefined, { urn });
            case "mongodbatlas:index/networkContainer:NetworkContainer":
                return new networkContainer_1.NetworkContainer(name, undefined, { urn });
            case "mongodbatlas:index/networkPeering:NetworkPeering":
                return new networkPeering_1.NetworkPeering(name, undefined, { urn });
            case "mongodbatlas:index/onlineArchive:OnlineArchive":
                return new onlineArchive_1.OnlineArchive(name, undefined, { urn });
            case "mongodbatlas:index/privateIpMode:PrivateIpMode":
                return new privateIpMode_1.PrivateIpMode(name, undefined, { urn });
            case "mongodbatlas:index/privateLinkEndpoint:PrivateLinkEndpoint":
                return new privateLinkEndpoint_1.PrivateLinkEndpoint(name, undefined, { urn });
            case "mongodbatlas:index/privateLinkEndpointService:PrivateLinkEndpointService":
                return new privateLinkEndpointService_1.PrivateLinkEndpointService(name, undefined, { urn });
            case "mongodbatlas:index/project:Project":
                return new project_1.Project(name, undefined, { urn });
            case "mongodbatlas:index/projectIpAccessList:ProjectIpAccessList":
                return new projectIpAccessList_1.ProjectIpAccessList(name, undefined, { urn });
            case "mongodbatlas:index/searchIndex:SearchIndex":
                return new searchIndex_1.SearchIndex(name, undefined, { urn });
            case "mongodbatlas:index/team:Team":
                return new team_1.Team(name, undefined, { urn });
            case "mongodbatlas:index/teams:Teams":
                return new teams_1.Teams(name, undefined, { urn });
            case "mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration":
                return new thirdPartyIntegration_1.ThirdPartyIntegration(name, undefined, { urn });
            case "mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser":
                return new x509authenticationDatabaseUser_1.X509AuthenticationDatabaseUser(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mongodbatlas", "index/alertConfiguration", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/auditing", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSchedule", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderAccess", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderAccessAuthorization", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderAccessSetup", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderSnapshot", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderSnapshotBackupPolicy", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderSnapshotRestoreJob", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cluster", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/customDbRole", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/customDnsConfigurationClusterAws", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/dataLake", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/databaseUser", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/encryptionAtRest", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/eventTrigger", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/globalClusterConfig", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/ldapConfiguration", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/ldapVerify", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/maintenanceWindow", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/networkContainer", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/networkPeering", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/onlineArchive", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateIpMode", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateLinkEndpoint", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateLinkEndpointService", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/project", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/projectIpAccessList", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/searchIndex", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/team", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/teams", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/thirdPartyIntegration", _module);
pulumi.runtime.registerResourceModule("mongodbatlas", "index/x509AuthenticationDatabaseUser", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("mongodbatlas", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:mongodbatlas") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map